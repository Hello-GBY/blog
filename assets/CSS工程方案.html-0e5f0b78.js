import{_ as l,M as e,p as r,q as d,N as a,V as t,R as s,t as n,a1 as c}from"./framework-5866ffd3.js";const u={},h=c(`<h1 id="css-工程方案" tabindex="-1"><a class="header-anchor" href="#css-工程方案" aria-hidden="true">#</a> CSS 工程方案</h1><h2 id="normalize-css" tabindex="-1"><a class="header-anchor" href="#normalize-css" aria-hidden="true">#</a> normalize.css</h2><p>对不同浏览器自带得默认样式进行一个统一表现。</p><p>比如：body 默认有 margin 即使内部元素全部填充上 也没有铺满整体是不是熟悉以下样式定义, 这是我们所常见得用来确定统一body，还有个浏览器默认得 h1 大小等等。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">h1</span> <span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> 2em<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0.67em 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以更为推荐的 <code>Normalize.css 为例</code>，它的核心思想是：</p><blockquote><p>使浏览器更一致地呈现所有元素并符合现代标准。它精确地只针对需要规范化的样式。</p></blockquote><h3 id="下载" tabindex="-1"><a class="header-anchor" href="#下载" aria-hidden="true">#</a> 下载</h3><p>官网：https://necolas.github.io/normalize.css/</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pnpm run normalize<span class="token punctuation">.</span>css
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>源码算上大量注释一共就300多行，每一个样式都有详细得作用说明。</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>尽可能最优先加载。</p></div><h4 id="以vue中为例" tabindex="-1"><a class="header-anchor" href="#以vue中为例" aria-hidden="true">#</a> 以vue中为例</h4><p>我是将Normalize.css 放在项目执行之前加载。</p><p>按照样式都放到 <code>assets/css/base.scss</code> 中统一引用，减少主文件代码量</p>`,16),m=s("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[s("pre",{class:"language-typescript"},[s("code",null,[s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token punctuation"},"{"),n(" createApp "),s("span",{class:"token punctuation"},"}"),n(),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},"'vue'"),n(`
`),s("span",{class:"token keyword"},"import"),n(" App "),s("span",{class:"token keyword"},"from"),n(),s("span",{class:"token string"},"'./App.vue'"),n(`
`),s("span",{class:"token operator"},"..."),n(`
`),s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token string"},"'@/assets/css/base.scss'"),n(`
`),s("span",{class:"token operator"},"..."),n(`
`),s("span",{class:"token keyword"},"const"),n(" app "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token function"},"createApp"),s("span",{class:"token punctuation"},"("),n("App"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"mount"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'#app'"),s("span",{class:"token punctuation"},")"),n(`
`)])]),s("div",{class:"highlight-lines"},[s("br"),s("br"),s("br"),s("div",{class:"highlight-line"}," "),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),k=s("div",{class:"language-typescript line-numbers-mode","data-ext":"ts"},[s("pre",{class:"language-typescript"},[s("code",null,[n("@"),s("span",{class:"token keyword"},"import"),n(),s("span",{class:"token string"},"'/node_modules/normalize.css/normalize.css'"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token operator"},"..."),n(`
html`),s("span",{class:"token punctuation"},","),n(" body"),s("span",{class:"token punctuation"},","),n(" #app"),s("span",{class:"token punctuation"},"{"),n(`
  width`),s("span",{class:"token operator"},":"),n(),s("span",{class:"token number"},"100"),s("span",{class:"token operator"},"%"),s("span",{class:"token punctuation"},";"),n(`
  height`),s("span",{class:"token operator"},":"),n(),s("span",{class:"token number"},"100"),s("span",{class:"token operator"},"%"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}"),n(`
`),s("span",{class:"token operator"},"..."),n(`
`)])]),s("div",{class:"highlight-lines"},[s("div",{class:"highlight-line"}," "),s("br"),s("br"),s("br"),s("br"),s("br"),s("br")]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),v=c('<p>####其他 <code>sanitize.css、Modern-CSS-Reset</code>。感兴趣得自行了解。</p><h1 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h1><p>编写的 CSS 总是全局的。JS可被封装为模块，CSS 代码却不行。</p><p>这导致在大型应用中：</p><ul><li>CSS 规则很可能互相干扰（选择器权重问题、命名冲突问题），带来混乱</li><li>由于不确定会发生什么，无人敢删 CSS 代码。于是项目里的 CSS 代码永远只增不减，成为一个烂摊子</li></ul><h1 id="框架提供的方案" tabindex="-1"><a class="header-anchor" href="#框架提供的方案" aria-hidden="true">#</a> 框架提供的方案</h1><h2 id="vue-的-scope-css" tabindex="-1"><a class="header-anchor" href="#vue-的-scope-css" aria-hidden="true">#</a> Vue 的 scope css</h2>',7),b={href:"https://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles",target:"_blank",rel:"noopener noreferrer"};function g(_,f){const o=e("CodeGroupItem"),i=e("CodeGroup"),p=e("ExternalLinkIcon");return r(),d("div",null,[h,a(i,null,{default:t(()=>[a(o,{title:"main.ts"},{default:t(()=>[m]),_:1}),a(o,{title:"base.scss"},{default:t(()=>[k]),_:1})]),_:1}),v,s("p",null,[n("它提供了 scoped CSS 方案，主要原理时，在打包的时候，在打包时，对于被标注为scoped的 style，其中的所有选择器被额外加上随机字符串[data-v-xxxxx]，来实现模块化机制。 具体可查看 "),s("a",b,[n("Vue Loader - scope CSS"),a(p)])])])}const S=l(u,[["render",g],["__file","CSS工程方案.html.vue"]]);export{S as default};
